stages:
  - Build
  - Test
  - Push-Image
  - Deploy

###################
### Build stage ###
###################

Build-App:
  stage: Build
  image: node:16-alpine
  rules:
    # Pull Request and Schedule
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "schedule"'
      when: never
    # Only Check in master
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH'
      when: never
    - changes: 
      - src/**/*
  cache:
    policy: push
    paths:
      - node_modules/
  script:
    - npm install
    - npm run build
  timeout: 5m

###################
### Test stage ###
###################

Test-App:
  stage: Test
  image: node:16-alpine
  rules:
    # Pull Request and Schedule
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "schedule"'
      when: never
    # Only Check in master
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH'
      when: never
    - changes: 
      - src/**/*
  cache:
    policy: pull
    paths:
      - node_modules/
  script:
    - npm run lint
  timeout: 3m

###################
##  Deploy stage ##
###################

Push-Image:
  stage: Push-Image
  image: docker:stable
  services:
    - docker:dind
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: never
    - when: always
  script:
    - docker login ${Docker_Registry_Url} -u ${Docker_Registry_UserName} -p ${Docker_Registry_Token}
    - docker build -t ${Docker_Registry_Url}/${Docker_Registry_Group}/${App_Name} .
    - docker push ${Docker_Registry_Url}/${Docker_Registry_Group}/${App_Name}
  timeout: 10m

Deploy-App:
  stage: Deploy
  image: gitlab/dind:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: never
    - when: always
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "${SSH_Key}" | tr -d '\r' > deploy.pem
    - chmod 400 deploy.pem
    - ssh-add deploy.pem
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - 'echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh ${Server_UserName}@${Server_IP} "docker images && docker ps -a"
    - ssh ${Server_UserName}@${Server_IP} "bash ~/clear-docker.sh ${App_Name} ${Docker_Registry_Url}/${Docker_Registry_Group}/${App_Name}"
    - ssh ${Server_UserName}@${Server_IP} "docker run -it -d --name ${App_Name} -p 80:80 ${Docker_Registry_Url}/${Docker_Registry_Group}/${App_Name}"
  timeout: 10m
